[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "automata-workflows"
version = "0.1.0"
description = "Enterprise Multi-Agent Process Automation Platform - Workflow Engine"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "SentientWave", email = "engineering@sentientwave.com"}
]
maintainers = [
    {name = "SentientWave", email = "engineering@sentientwave.com"}
]
keywords = ["automation", "workflows", "temporal", "ai", "agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.15",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
requires-python = ">=3.13"
dependencies = [
    # Core Temporal
    "temporalio>=1.4.0",
    
    # Data validation and serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Environment configuration
    "python-dotenv>=1.0.0",
    
    # Async HTTP client
    "httpx>=0.25.0",
    
    # Database
    "aiosqlite>=0.20.0",
    "sqlalchemy[asyncio]>=2.0.0",
    
    # Logging
    "structlog>=23.2.0",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "typing-extensions>=4.8.0",
    
    # External service integrations
    "modal>=0.63.0",
    "slack-sdk>=3.26.0",
    "PyGithub>=2.1.0",
    "jira>=3.8.0",
    
    # Monitoring and observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    
    # Code quality
    "black>=23.10.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "flake8>=6.1.0",
    "ruff>=0.1.0",
    
    # Development tools
    "pre-commit>=3.5.0",
    "ipython>=8.16.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/sentientwave/automata-workflows"
Documentation = "https://docs.sentientwave.com/automata"
Repository = "https://github.com/sentientwave/automata-workflows"
"Bug Tracker" = "https://github.com/sentientwave/automata-workflows/issues"

[project.scripts]
automata-workers = "scripts.run_workers:main"
automata-workflow = "scripts.run_workflow:main"
automata-migrate = "scripts.migrate_db:main"

[tool.hatch.build.targets.wheel]
packages = ["shared", "workflows", "scripts"]
exclude = ["tests*"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

# Black configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["shared", "workflows", "scripts"]
known_third_party = ["temporalio", "pydantic", "httpx", "asyncpg", "sqlalchemy"]

# mypy configuration
[tool.mypy]
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "modal.*",
    "slack_sdk.*",
    "github.*",
    "jira.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=shared",
    "--cov=workflows",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "temporal: marks tests that require Temporal",
]
asyncio_mode = "auto"
pythonpath = ["."]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["shared", "workflows", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py314"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011", "B018"]
"scripts/**" = ["E402"]  # Scripts can have imports after path setup

# Bandit configuration (security)
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# UV configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.10.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "flake8>=6.1.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
    "ipython>=8.16.0",
]

# UV workspace configuration (for future monorepo support)
# Note: Uncomment when converting to monorepo structure
# [tool.uv.workspace]
# members = [
#     "workflows/*",
#     "shared/*",
# ]